name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: "1.23"

jobs:
  # Unit tests with race detection - primary quality gate
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21", "1.22", "1.23"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run unit tests with race detection
      run: |
        go test -v -race -coverprofile=coverage-core.txt -covermode=atomic \
          -coverpkg=github.com/zoobzio/streamz $(go list ./... | grep -v '/examples/' | grep -v '/testing/')
        echo "Core library test coverage:"
        go tool cover -func=coverage-core.txt | tail -1
        
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage-core.txt
        flags: unit
        name: streamz-coverage-${{ matrix.go-version }}
        fail_ci_if_error: false
        verbose: true

  # Integration tests - component interaction verification
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run integration tests with race detection
      run: go test -v -race -timeout=10m ./testing/integration/...

  # Code quality and security
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run linters
      run: make lint
    
    - name: Security Report
      if: always()
      run: |
        golangci-lint run --config=.golangci.yml --out-format=json > lint-report.json || true
        echo "### Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "Linters with findings:" >> $GITHUB_STEP_SUMMARY
        jq -r '.Issues[] | .FromLinter' lint-report.json 2>/dev/null | sort | uniq -c | sort -nr >> $GITHUB_STEP_SUMMARY || echo "No issues found âœ…" >> $GITHUB_STEP_SUMMARY

  # Performance benchmarks - regression detection
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
    
    - name: Run benchmarks and store results
      run: |
        echo "### Core Library Benchmarks" | tee benchmark_results.txt
        go test -v -bench=. -benchmem -benchtime=100ms -timeout=15m ./... | tee -a benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark_results.txt

  # End-to-end verification using examples
  e2e-examples:
    name: E2E Examples
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies for examples
      run: |
        for dir in examples/*/; do
          if [ -f "$dir/go.mod" ]; then
            echo "Downloading dependencies for $dir"
            (cd "$dir" && go mod download)
          fi
        done
        
    - name: Build all examples
      run: |
        for dir in examples/*/; do
          if [ -f "$dir/main.go" ]; then
            echo "Building $dir"
            (cd "$dir" && go build -v .)
          fi
        done
        
    - name: Test examples with race detection
      run: |
        echo "Testing examples without coverage tracking..."
        for dir in examples/*/; do
          if [ -f "$dir/go.mod" ]; then
            echo "Testing $dir"
            (cd "$dir" && go test -v -race ./... || true)
          fi
        done
        
    - name: Verify example imports
      run: |
        echo "### Verifying examples use streamz correctly"
        for dir in examples/*/; do
          if [ -d "$dir" ] && [ -f "$dir/go.mod" ]; then
            echo "Checking $dir"
            # Verify they import the streamz module
            (cd "$dir" && go list -m github.com/zoobzio/streamz) || echo "Warning: $dir doesn't import streamz"
          fi
        done

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif --no-fail ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      continue-on-error: true
      with:
        sarif_file: gosec-results.sarif
        wait-for-processing: true
        
    - name: Upload security results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gosec-results
        path: gosec-results.sarif
        retention-days: 7

  # Overall CI status check
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, benchmarks, quality, e2e-examples, security]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.benchmarks.result }}" != "success" ]]; then
          echo "Benchmarks failed"
          exit 1
        fi
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.e2e-examples.result }}" != "success" ]]; then
          echo "E2E examples failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        echo "All CI checks passed successfully"